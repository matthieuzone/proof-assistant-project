define s = fun (n : Nat) -> fun (pn : Nat) -> n
define pred = fun (n : Nat) -> Ind (fun (k : Nat) -> Nat) Z s n
eval pred Z
eval pred (S (S (S Z)))
define p = fun (k:Nat) -> Nat
define add = fun (m:Nat) -> fun (n:Nat) -> Ind p m (fun (k:Nat) -> fun (km:Nat) -> S km) n
eval add (S (S (S Z))) (S (S Z))

define pp = fun (x : Nat) -> fun (y : Nat) -> fun (e : x = y) -> (S x = S y)
define rr = fun (x : Nat) -> Refl (S x)
define Seq = fun (x : Nat) -> fun (y : Nat) -> fun (e : x = y) -> J pp rr x y e
check Seq = Pi (x : Nat) -> Pi (y : Nat) -> Pi (e : x = y) -> S x = S y

define addz = fun (n : Nat) -> Refl n
check addz = Pi (n : Nat) -> add n Z = n

define zadd = fun (n : Nat) -> Ind (fun (k : Nat) -> add Z k = k) (Refl Z) (fun (k : Nat) -> fun (pk : add Z k = k) -> Seq (add Z k) k pk) n
check zadd = Pi (n : Nat) -> add Z n = n